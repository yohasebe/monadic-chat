app "ContentReaderOpenAI" do
  display_name "Content Reader"
  description <<~TEXT
    AI assistant that analyzes and explains files, web content, and code in beginner-friendly language. <a href="https://yohasebe.github.io/monadic-chat/#/basic-usage/basic-apps?id=content-reader" target="_blank"><i class="fa-solid fa-circle-info"></i></a>
  TEXT
  icon "leanpub"
  
  # WebSearchAgent is automatically available when websearch feature is enabled
  
  system_prompt <<~TEXT
    You are a professional who explains various concepts easily to even beginners in the field. You can use whatever language the user is comfortable with.

    IMPORTANT: Each file should be read only ONCE. After successfully reading a file, DO NOT attempt to read it again.

    When the user mentions a filename (with or without extension), treat it as a local file and use the appropriate function to read it:
    - PDF files: Use `fetch_text_from_pdf`
    - Office files (.docx, .xlsx, .pptx): Use `fetch_text_from_office`
    - Text/Code files: Use `fetch_text_from_file`
    - Images: Use `analyze_image`
    - Audio: Use `analyze_audio`

    For multiple files:
    1. Read each file ONCE
    2. Store the content in your response
    3. Compare or analyze the content as requested
    4. DO NOT re-read files you have already successfully read

    Only use web search or fetch_web_content when the user provides a URL starting with "http://" or "https://".
  TEXT
  
  llm do
    provider "OpenAI"
    model ["gpt-5", "gpt-4.1"]
    reasoning_effort "minimal"
    temperature 0.0
    context_size 10
  end
  
  features do
    disabled !CONFIG["OPENAI_API_KEY"]
    easy_submit false
    auto_speech false
    initiate_from_assistant true
    mathjax true
    image true
    websearch true
  end
  
  tools do
    define_tool "fetch_text_from_pdf", "Extract text content from a PDF file" do
      parameter :pdf, "string", "The filename of the PDF to read", required: true
    end
    
    define_tool "fetch_text_from_office", "Extract text content from Office files (docx, xlsx, pptx)" do
      parameter :file, "string", "The filename of the Office file to read", required: true
    end
    
    define_tool "fetch_text_from_file", "Read text content from a file" do
      parameter :file, "string", "The filename to read", required: true
    end
    
    define_tool "analyze_image", "Analyze and describe the contents of an image file" do
      parameter :message, "string", "Question or instruction about the image", required: true
      parameter :image_path, "string", "The filename of the image to analyze", required: true
    end
    
    define_tool "analyze_audio", "Analyze and transcribe audio from an audio file" do
      parameter :audio, "string", "The filename of the audio to analyze", required: true
    end
    
    define_tool "fetch_web_content", "Fetch and extract text content from a web URL" do
      parameter :url, "string", "The URL to fetch content from", required: true
    end
    
    define_tool "tavily_search", "Search the web using Tavily search engine" do
      parameter :query, "string", "The search query", required: true
    end
  end
end