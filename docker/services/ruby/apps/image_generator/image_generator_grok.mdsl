app "ImageGeneratorGrok" do
  description do
    en <<~TEXT
    Generate images from text descriptions. <a href="https://yohasebe.github.io/monadic-chat/#/basic-usage/basic-apps?id=image-generator" target="_blank"><i class="fa-solid fa-circle-info"></i></a>
    TEXT
    
    ja <<~TEXT
    テキスト説明から画像生成。 <a href="https://yohasebe.github.io/monadic-chat/#/basic-usage/basic-apps?id=image-generator" target="_blank"><i class="fa-solid fa-circle-info"></i></a>
    TEXT
    
    zh <<~TEXT
    从文本描述生成图像。 <a href="https://yohasebe.github.io/monadic-chat/#/basic-usage/basic-apps?id=image-generator" target="_blank"><i class="fa-solid fa-circle-info"></i></a>
    TEXT
    
    ko <<~TEXT
    텍스트 설명에서 이미지 생성. <a href="https://yohasebe.github.io/monadic-chat/#/basic-usage/basic-apps?id=image-generator" target="_blank"><i class="fa-solid fa-circle-info"></i></a>
    TEXT
    
    es <<~TEXT
    Generar imágenes desde descripciones de texto. <a href="https://yohasebe.github.io/monadic-chat/#/basic-usage/basic-apps?id=image-generator" target="_blank"><i class="fa-solid fa-circle-info"></i></a>
    TEXT
    
    fr <<~TEXT
    Générer des images à partir de descriptions textuelles. <a href="https://yohasebe.github.io/monadic-chat/#/basic-usage/basic-apps?id=image-generator" target="_blank"><i class="fa-solid fa-circle-info"></i></a>
    TEXT
    
    de <<~TEXT
    Bilder aus Textbeschreibungen generieren. <a href="https://yohasebe.github.io/monadic-chat/#/basic-usage/basic-apps?id=image-generator" target="_blank"><i class="fa-solid fa-circle-info"></i></a>
    TEXT
  end

  icon "fa-regular fa-image"

  display_name "Image Generator"

  llm do
    provider "xai"
    model "grok-4-0709"
    temperature 0.0
  end

  system_prompt <<~TEXT
    You help the user create images. You conduct the following process step-by-step.

    1. Call the `generate_image_with_grok` function with the user's text prompt.
    2. The function returns a JSON response with these fields:
       - `success`: boolean (true if image was generated, false if failed)
       - `filename`: string (the generated image filename, only present if success=true)
       - `revised_prompt`: string (the enhanced prompt, only present if success=true)
       - `message`: string (error message, only present if success=false)
    
    3. IMPORTANT: Check the `success` field carefully:
       - If `success` is `true` AND `filename` exists, the image was generated successfully
       - If `success` is `false` OR `message` field exists, the generation failed
    
    4. For SUCCESSFUL generation (success=true with filename):
       Extract the EXACT `revised_prompt` and `filename` values and embed them in this HTML:
       <div class="revised_prompt">
         <b>Revised Prompt</b>: REVISED_PROMPT
       </div>
       <div class="generated_image">
         <img src="/data/FILENAME">
       </div>
    
    5. For FAILED generation (success=false):
       Return the error message from the `message` field to the user.

    Remember that `generate_image_with_grok` function will call the Dall-E 3 model to generate a revised prompt and an image based on the revised prompt.

    If the user asks you to add something to generated images or to modify them, re-generate another image by calling the `generate_image_with_grok` function with an extended or modified prompt and discarding the old ones. Do not modify an existing image itself directly—just ignore the image URLs included in the previous message.

    If an error occurs as a result of calling the `generate_image_with_grok` function, return the error message to the user: Do not retry calling the function automatically. If the user asks you to retry, you can do so by calling the `generate_image_with_grok` function again with a prompt modified according to the error message.
    
    IMPORTANT: After a few successful image generations, if the system shows repeated function calls without generating an image, inform the user that they have likely reached the maximum number of function calls in this conversation. Suggest that they start a new conversation to generate more images.
  TEXT

  features do
    disabled !CONFIG["XAI_API_KEY"]
    easy_submit false
    auto_speech false
    initiate_from_assistant false
    image true
    pdf false
    image_generation true
    monadic false
    group "xAI"
  end

  tools do
    define_tool "generate_image_with_grok", "Generate images using Dall-E 3 through xAI Grok." do
      parameter :prompt, "string", "Text description of the desired image", required: true
    end

    # Auto-generated tool definitions
    define_tool "generate_image_with_openai", "Generate Image With Openai" do
      parameter :operation, "string", "The operation", required: true
      parameter :model, "string", "The model", required: true
      parameter :prompt, "string", "The prompt"
      parameter :images, "string", "The images"
      parameter :mask, "string", "The mask"
      parameter :n, "integer", "The n"
      parameter :size, "string", "The size"
      parameter :quality, "string", "The quality"
      parameter :output_format, "string", "The output format"
      parameter :background, "string", "The background"
      parameter :output_compression, "string", "The output compression"
    end

    define_tool "generate_image_with_gemini", "Generate Image With Gemini" do
      parameter :model, "string", "The model", required: true
      parameter :prompt, "string", "The prompt", required: true
      parameter :n, "integer", "The n"
      parameter :size, "string", "The size"
      parameter :output_format, "string", "The output format"
    end
  end
end