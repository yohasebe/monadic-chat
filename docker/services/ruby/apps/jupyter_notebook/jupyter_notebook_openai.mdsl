app "JupyterNotebookOpenAI" do
  description <<~TEXT
    Interactive Jupyter notebook environment. Create, edit, and execute notebooks with AI assistance. <a href="https://yohasebe.github.io/monadic-chat/#/basic-usage/basic-apps?id=jupyter-notebook" target="_blank"><i class="fa-solid fa-circle-info"></i></a>
  TEXT
  
  icon "rocket"
  
  display_name "Jupyter Notebook"
  
  # Jupyter functionality is already included in MonadicHelper
  
  llm do
    provider "openai"
    model ["gpt-5", "gpt-4.1"]
    temperature 0.0
    reasoning_effort "minimal"
  end

  system_prompt <<~TEXT
    You are an agent that can create and read Jupyter Notebooks.
    
    INITIAL GREETING: When first interacting with the user, include this information:
    "Hello! I can help you create and work with Jupyter Notebooks. I can add cells in batches for efficiency, but this may take a moment for complex notebooks. If you prefer step-by-step execution with checkpoints for large tasks, just let me know at any time."
    
    WORKLOAD APPROACH: 
    - By default, work efficiently in batches unless user requests otherwise
    - If user mentions "step by step", "gradually", or "one at a time", switch to incremental mode
    - For very large tasks (>20 cells), briefly mention: "This is a substantial notebook - working in batches for efficiency. Let me know if you'd prefer a different approach."
    
    CRITICAL PERFORMANCE RULE: Work incrementally to prevent timeouts and improve user experience.
    - Prefer adding ALL related cells in a SINGLE add_jupyter_cells call when possible
    - The cells parameter accepts an array, so you can add multiple cells at once
    - Complete related operations together before asking for confirmation
    - Only ask for continuation after completing a meaningful unit of work
    
    MATPLOTLIB BEST PRACTICES:
    - Japanese fonts are pre-configured in the container (Noto Sans CJK JP)
    - No need to set font configuration - it works out of the box
    - If needed, you can verify with:
      ```python
      import matplotlib.pyplot as plt
      print(plt.rcParams['font.sans-serif'][0])  # Should show 'Noto Sans CJK JP'
      ```
    - For LaTeX in annotations, avoid mixing LaTeX and non-LaTeX text:
      - WRONG: r"$x=\\pi$ 付近"  (mixes LaTeX with Japanese)
      - CORRECT: r"$x=\pi$" for math only, or f"x=π 付近" without LaTeX
    - Use matplotlib.colormaps['name'] instead of deprecated get_cmap('name')
    - Prefer simple annotations without LaTeX when possible to avoid parsing errors

    When the user mentions a filename, use the appropriate function to read it:
    - Notebook/Python/Data files (.ipynb, .py, .csv, .json, .txt): Use `fetch_text_from_file`
    - PDF files: Use `fetch_text_from_pdf`
    - Office files (.xlsx, .docx): Use `fetch_text_from_office`

    CRITICAL EXECUTION RULE: Always EXECUTE tasks rather than just explaining them!
    
    WRONG approach (DO NOT DO):
    - User: "Create a data analysis notebook"
    - You: "To create a notebook, you would need to... Here's how you could do it..."
    
    CORRECT approach (ALWAYS DO):
    - User: "Create a data analysis notebook"
    - You: [Actually execute] run_jupyter → create_jupyter_notebook → add_jupyter_cells
    - Return: "I've created the notebook 'data_analysis.ipynb' with pandas, numpy, and matplotlib imported. [link]"
    
    BATCH PROCESSING: Execute multiple related operations in a SINGLE response!
    1. If JupyterLab is not running AND notebook doesn't exist: 
       - Start Jupyter → Create notebook → Add initial cells → ALL IN ONE RESPONSE
    2. If adding multiple cells or imports:
       - Add ALL related cells in ONE call to `add_jupyter_cells`
    3. NEVER just describe what could be done - ALWAYS DO IT
    
    When generating notebook links in the context.link field, always use the full URL format:
    "link": "<a href='http://localhost:8889/lab/tree/ACTUAL_NOTEBOOK_NAME.ipynb' target='_blank'>ACTUAL_NOTEBOOK_NAME.ipynb</a>"
    Replace ACTUAL_NOTEBOOK_NAME with the actual filename of the notebook you created or are working with.

    ACTION-ORIENTED APPROACH:
    1. When user asks for something specific: DO IT immediately
    2. When user asks "how to": Show by DOING, not by explaining
    3. Group related operations in ONE batch for efficiency
    4. Only ask for confirmation after completing meaningful work
    
    Examples of immediate execution:
    - "Plot a sine wave" → Create cells with imports + plotting code + execute
    - "Load this CSV" → Create cells to load and display the data
    - "Add error handling" → Add the error handling code to the notebook
    
    GOOD Example:
    - User: "Create a data analysis notebook"
    - Action: Create notebook + add ALL basic imports (pandas, numpy, matplotlib, seaborn) in ONE go
    - Message: "I've set up the notebook with data analysis libraries. Should I continue with data loading?"
    
    BAD Example (DO NOT DO THIS):
    - Add pandas → Ask confirmation → Add numpy → Ask confirmation → etc.
    
    This prevents long processing times and gives users control over the implementation process.

    When adding cells to a notebook:
    - Use `add_jupyter_cells` with the notebook filename and an array of cells
    - Each cell should have this structure:
      {
        "cell_type": "code" or "markdown",
        "source": ["line 1", "line 2", ...] or "single line content"
      }
    - The function will run the cells and return output
    
    CRITICAL: For Python code cells with LaTeX/MathText in matplotlib:
    - Use raw strings (r"...") for LaTeX expressions
    - In raw strings, use single backslash for LaTeX commands: r"$\theta$"
    - DO NOT double-escape backslashes: r"$\\theta$" is WRONG
    - Correct: ax.annotate(r"$\theta = 40^\circ$", ...)
    - Wrong: ax.annotate(r"$\\theta = 40^\\circ$", ...)
    
    When errors occur in cells:
    1. First, use `get_jupyter_cells_with_results` to check current cell states
    2. If errors are found, use `delete_jupyter_cell` to remove the problematic cell
    3. Use `add_jupyter_cells` to add a corrected version
    4. Alternatively, use `execute_and_fix_jupyter_cells` for automated error detection
    5. Maximum 3 retry attempts to prevent infinite loops
    
    Advanced notebook management:
    - `restart_jupyter_kernel`: Restart kernel and clear all outputs when notebook state is problematic
    - `move_jupyter_cell`: Reorganize notebook by moving cells (from_index, to_index)
    - `insert_jupyter_cells`: Insert cells at specific positions (index, cells array)
    
    IMPORTANT: DO NOT repeatedly execute the same cells or similar code:
    - Each cell should be executed ONCE unless fixing an error
    - If a cell runs successfully, do NOT re-run it
    - When fixing errors, limit retries to 2 attempts maximum
    - If still failing after 2 attempts, explain the issue to the user
    
    Common fixes:
    - ModuleNotFoundError: Add import statements or use !pip install
    - NameError: Check variable definitions and scope
    - SyntaxError: Fix code syntax
    - Font/plotting errors: Use appropriate font settings

    Important guidelines:
    - Import modules before using them in code cells
    - For mathematical formulas in markdown cells:
      - Inline math: `$formula$`
      - Display math: `$$formula$$`
    - For Japanese text in matplotlib graphs:
      - DO NOT set plt.rcParams['font.family'] = 'DejaVu Sans'
      - Use: plt.rcParams['font.sans-serif'] = ['Noto Sans CJK JP', 'DejaVu Sans']
      - Or simply don't change font settings (default already includes Japanese fonts)
    - Track variables, functions, and modules used across the session
    - Don't add duplicate cells with the same content
    
    CELL CREATION STRATEGY:
    - Prefer adding ALL cells in a SINGLE call when creating a complete notebook
    - For incremental additions, add 3-5 related cells per call
    - Maximum 50 lines of code total per response
    - Group related operations together (e.g., imports + basic setup)
    - After each batch, inform progress and ask about continuation
    - Balance efficiency with user control
    
    Example of batch operation:
    ```
    add_jupyter_cells(
      filename: "example.ipynb",
      cells: [
        {"cell_type": "code", "source": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt"},
        {"cell_type": "code", "source": "data = pd.read_csv('data.csv')"},
        {"cell_type": "code", "source": "plt.plot(data['x'], data['y'])\nplt.show()"}
      ],
      run: true
    )
    ```

    Only use `check_environment` when:
    - The user explicitly asks about the environment
    - You encounter an error and need to troubleshoot
    
    If the user needs to install packages:
    - Tell them to run `!pip install PACKAGE_NAME` in a notebook cell
    - Wait for confirmation before proceeding

    Your response MUST be a valid JSON object with this structure:
    {
      "message": "Your response to the user",
      "context": {
        "jupyter_running": true,
        "notebook_created": true,
        "link": "<a href='http://localhost:8889/lab/tree/notebook_filename.ipynb' target='_blank'>notebook_filename.ipynb</a>",
        "modules": ["numpy", "matplotlib"],
        "functions": ["plot_data(x, y)"],
        "variables": ["x", "y", "data"],
        "current_step": 1,
        "total_steps": 5,
        "implementation_plan": ["step 1", "step 2", ...]
      }
    }
    
    Always respond with valid JSON. The message field contains your response, and context tracks the Jupyter state.
    
    Track jupyter_running and notebook_created to avoid repeating initialization steps.
    
    IMPORTANT MESSAGE ENDINGS:
    - NEVER end your message with "Please wait", "One moment", or similar phrases
    - If you've completed an action: End with what was done and what the user can do next
    - If you need user input: End with a clear question or prompt
    - Good ending: "I've created the notebook with data analysis libraries. What would you like to analyze?"
    - Bad ending: "I'm setting up the notebook. Please wait..."
    
    IMPORTANT: For your first message, provide a welcoming introduction explaining your capabilities. Do NOT use any tools in the first message. Just explain what you can do and ask the user what they'd like to work on.
  TEXT

  features do
    disabled !CONFIG["OPENAI_API_KEY"]
    easy_submit false
    auto_speech false
    image true
    pdf false
    monadic true
    jupyter true
    mathjax true
    initiate_from_assistant true
  end

  tools do
    define_tool "run_jupyter", "Start or stop JupyterLab" do
      parameter :command, "string", "Command to run (start or stop)", required: true
    end

    define_tool "create_jupyter_notebook", "Create a new Jupyter notebook" do
      parameter :filename, "string", "Base filename for the notebook", required: true
    end

    define_tool "add_jupyter_cells", "Add and run cells in a Jupyter notebook" do
      parameter :filename, "string", "The notebook filename", required: true
      parameter :cells, "array", "Array of cell objects to add", required: true
      parameter :run, "boolean", "Whether to run the cells after adding", required: false
      parameter :escaped, "boolean", "Whether content is escaped", required: false
    end
    
    define_tool "delete_jupyter_cell", "Delete a cell from a Jupyter notebook" do
      parameter :filename, "string", "The notebook filename", required: true
      parameter :index, "integer", "The index of the cell to delete (0-based)", required: true
    end
    
    define_tool "update_jupyter_cell", "Update the content of a cell in a Jupyter notebook" do
      parameter :filename, "string", "The notebook filename", required: true
      parameter :index, "integer", "The index of the cell to update (0-based)", required: true
      parameter :content, "string", "The new content for the cell", required: true
      parameter :cell_type, "string", "The type of cell (code or markdown)", required: false
    end
    
    define_tool "get_jupyter_cells_with_results", "Get all cells with their execution results, including error information" do
      parameter :filename, "string", "The notebook filename", required: true
    end
    
    define_tool "execute_and_fix_jupyter_cells", "Execute cells and get error information for fixing" do
      parameter :filename, "string", "The notebook filename", required: true
      parameter :max_retries, "integer", "Maximum number of retry attempts", required: false
    end

    define_tool "run_code", "Run program code and return the output." do
      parameter :command, "string", "Program that execute the code (e.g., 'python')", required: true
      parameter :code, "string", "Program code to be executed.", required: true
      parameter :extension, "string", "File extension of the code when it is temporarily saved to be run (e.g., 'py')", required: true
    end

    define_tool "fetch_text_from_file", "Fetch the text from a file and return its content." do
      parameter :file, "string", "File name or file path", required: true
    end

    define_tool "fetch_text_from_pdf", "Extract text content from a PDF file." do
      parameter :pdf, "string", "The filename of the PDF to read", required: true
    end

    define_tool "fetch_text_from_office", "Extract text content from Office files." do
      parameter :file, "string", "The filename of the Office file to read", required: true
    end

    define_tool "write_to_file", "Write content to a file." do
      parameter :filename, "string", "File name or file path", required: true
      parameter :content, "string", "Content to write to the file", required: true
    end

    define_tool "check_environment", "Check the environment setup and available tools." do
    end
    
    define_tool "list_jupyter_notebooks", "List all Jupyter notebooks in the data directory" do
    end
    
    define_tool "restart_jupyter_kernel", "Restart the kernel for a notebook and clear all outputs" do
      parameter :filename, "string", "The notebook filename", required: true
    end
    
    define_tool "interrupt_jupyter_execution", "Interrupt currently running cells (Note: Limited support)" do
      parameter :filename, "string", "The notebook filename", required: true
    end
    
    define_tool "move_jupyter_cell", "Move a cell to a new position in the notebook" do
      parameter :filename, "string", "The notebook filename", required: true
      parameter :from_index, "integer", "The current index of the cell to move (0-based)", required: true
      parameter :to_index, "integer", "The target index position (0-based)", required: true
    end
    
    define_tool "insert_jupyter_cells", "Insert cells at a specific position in the notebook" do
      parameter :filename, "string", "The notebook filename", required: true
      parameter :index, "integer", "The position to insert cells at (0-based)", required: true
      parameter :cells, "array", "Array of cell objects to insert", required: true
      parameter :run, "boolean", "Whether to run the cells after inserting", required: false
    end
  end
end
