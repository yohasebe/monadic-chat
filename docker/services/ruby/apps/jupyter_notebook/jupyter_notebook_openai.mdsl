app "JupyterNotebookOpenAI" do
  description <<~TEXT
    Interactive Jupyter notebook environment. Create, edit, and execute notebooks with AI assistance. <a href="https://yohasebe.github.io/monadic-chat/#/basic-usage/basic-apps?id=jupyter-notebook" target="_blank"><i class="fa-solid fa-circle-info"></i></a>
  TEXT
  
  icon "rocket"
  
  display_name "Jupyter Notebook"
  
  # Jupyter functionality is already included in MonadicHelper
  
  llm do
    provider "openai"
    model "gpt-4.1"
    temperature 0.0
  end

  system_prompt <<~TEXT
    You are an agent that can create and read Jupyter Notebooks.

    When the user mentions a filename, use the appropriate function to read it:
    - Notebook/Python/Data files (.ipynb, .py, .csv, .json, .txt): Use `fetch_text_from_file`
    - PDF files: Use `fetch_text_from_pdf`
    - Office files (.xlsx, .docx): Use `fetch_text_from_office`

    IMPORTANT: If the user's request involves Jupyter operations (creating notebooks, adding cells, etc.), follow these steps:
    1. Check if JupyterLab is running (use context.jupyter_running)
    2. If not running, start it using `run_jupyter` with command "run"
    3. Check if a notebook exists (use context.notebook_created)
    4. If no notebook exists, create one using `create_jupyter_notebook`
    5. Then proceed with the user's request

    When adding cells to a notebook:
    - Use `add_jupyter_cells` with the notebook filename and an array of cells
    - Each cell should have this structure:
      {
        "cell_type": "code" or "markdown",
        "source": ["line 1", "line 2", ...] or "single line content"
      }
    - The function will run the cells and return output
    
    When errors occur in cells:
    1. First, use `get_jupyter_cells_with_results` to check current cell states
    2. If errors are found, use `delete_jupyter_cell` to remove the problematic cell
    3. Use `add_jupyter_cells` to add a corrected version
    4. Alternatively, use `execute_and_fix_jupyter_cells` for automated error detection
    5. Maximum 3 retry attempts to prevent infinite loops
    
    Common fixes:
    - ModuleNotFoundError: Add import statements or use !pip install
    - NameError: Check variable definitions and scope
    - SyntaxError: Fix code syntax
    - Font/plotting errors: Use appropriate font settings

    Important guidelines:
    - Import modules before using them in code cells
    - For mathematical formulas in markdown cells:
      - Inline math: `$formula$`
      - Display math: `$$formula$$`
    - Use font "Noto Sans CJK JP" for CJK characters
    - Track variables, functions, and modules used across the session
    - Don't add duplicate cells with the same content

    Only use `check_environment` when:
    - The user explicitly asks about the environment
    - You encounter an error and need to troubleshoot
    
    If the user needs to install packages:
    - Tell them to run `!pip install PACKAGE_NAME` in a notebook cell
    - Wait for confirmation before proceeding

    Response format - JSON object with:
    ```json
    {
      "message": "Your response to the user",
      "context": {
        "jupyter_running": true,
        "notebook_created": true,
        "link": "<a href='http://host:8889/lab/tree/notebook_filename.ipynb'>notebook_filename.ipynb</a>",
        "modules": ["numpy", "matplotlib"],
        "functions": ["plot_data(x, y)"],
        "variables": ["x", "y", "data"]
      }
    }
    ```
    
    Track jupyter_running and notebook_created to avoid repeating initialization steps.
  TEXT

  features do
    disabled !CONFIG["OPENAI_API_KEY"]
    easy_submit false
    auto_speech false
    image true
    pdf false
    monadic true
    jupyter true
    mathjax true
    initiate_from_assistant false
  end

  tools do
    define_tool "run_jupyter", "Start or stop JupyterLab" do
      parameter :command, "string", "Command to run (start or stop)", required: true
    end

    define_tool "create_jupyter_notebook", "Create a new Jupyter notebook" do
      parameter :filename, "string", "Base filename for the notebook", required: true
    end

    define_tool "add_jupyter_cells", "Add and run cells in a Jupyter notebook" do
      parameter :filename, "string", "The notebook filename", required: true
      parameter :cells, "array", "Array of cell objects to add", required: true
      parameter :run, "boolean", "Whether to run the cells after adding", required: false
      parameter :escaped, "boolean", "Whether content is escaped", required: false
    end
    
    define_tool "delete_jupyter_cell", "Delete a cell from a Jupyter notebook" do
      parameter :filename, "string", "The notebook filename", required: true
      parameter :index, "integer", "The index of the cell to delete (0-based)", required: true
    end
    
    define_tool "update_jupyter_cell", "Update the content of a cell in a Jupyter notebook" do
      parameter :filename, "string", "The notebook filename", required: true
      parameter :index, "integer", "The index of the cell to update (0-based)", required: true
      parameter :content, "string", "The new content for the cell", required: true
      parameter :cell_type, "string", "The type of cell (code or markdown)", required: false
    end
    
    define_tool "get_jupyter_cells_with_results", "Get all cells with their execution results, including error information" do
      parameter :filename, "string", "The notebook filename", required: true
    end
    
    define_tool "execute_and_fix_jupyter_cells", "Execute cells and get error information for fixing" do
      parameter :filename, "string", "The notebook filename", required: true
      parameter :max_retries, "integer", "Maximum number of retry attempts", required: false
    end

    define_tool "run_code", "Run program code and return the output." do
      parameter :command, "string", "Program that execute the code (e.g., 'python')", required: true
      parameter :code, "string", "Program code to be executed.", required: true
      parameter :extension, "string", "File extension of the code when it is temporarily saved to be run (e.g., 'py')", required: true
    end

    define_tool "fetch_text_from_file", "Fetch the text from a file and return its content." do
      parameter :file, "string", "File name or file path", required: true
    end

    define_tool "fetch_text_from_pdf", "Extract text content from a PDF file." do
      parameter :pdf, "string", "The filename of the PDF to read", required: true
    end

    define_tool "fetch_text_from_office", "Extract text content from Office files." do
      parameter :file, "string", "The filename of the Office file to read", required: true
    end

    define_tool "write_to_file", "Write content to a file." do
      parameter :filename, "string", "File name or file path", required: true
      parameter :content, "string", "Content to write to the file", required: true
    end

    define_tool "check_environment", "Check the environment setup and available tools." do
    end
  end
end