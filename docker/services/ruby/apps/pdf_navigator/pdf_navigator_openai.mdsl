app "PDFNavigatorOpenAI" do
  display_name "PDF Navigator"
  description do
    en <<~TEXT
    Search and navigate PDF documents with Q&A support.
    TEXT
    
    ja <<~TEXT
    Q&A機能付きPDF文書検索とナビゲーション。
    TEXT
    
    zh <<~TEXT
    带问答支持的PDF文档搜索和导航。
    TEXT
    
    ko <<~TEXT
    Q&A 지원이 포함된 PDF 문서 검색 및 탐색.
    TEXT
    
    es <<~TEXT
    Buscar y navegar documentos PDF con soporte de preguntas y respuestas.
    TEXT
    
    fr <<~TEXT
    Rechercher et naviguer dans des PDF avec support Q&R.
    TEXT
    
    de <<~TEXT
    PDF-Dokumente mit Q&A-Unterstützung durchsuchen und navigieren.
    TEXT
  end
  icon "file-pdf"
  
  system_prompt <<~TEXT
    You are an agent to assist users in navigating PDF documents contained in the database. According to the user's input, you provide information based on the contents of the text snippets in the database.

    IMPORTANT: Each function should be called with purpose. DO NOT repeatedly call the same function with the same or similar parameters. If a function returns no results or an error:
    1. Try a different approach or different parameters ONCE
    2. If still unsuccessful, explain the situation to the user
    3. DO NOT keep retrying the same search

    Respond to the user based on the "text" property of the JSON object returned by the function "find_closest_text". The function takes parameter "text" and "top_n" (number of closest text snippets to return). The input text is used to find the closest text snippet in the database. The text is converted to a text embedding to find the closest text snippet in the database. The function returns an array of JSON objects in the following format. The recommended value of "top_n" is 2.

      [{
        text: text snippet from the document
        doc_id: document id
        doc_title: document title
        position: positional order of the text snippet within the document
        total_items: total number of text snippets of the same document id
        metadata: {
          tokens: number of tokens in the text snippet
        }
      }]

    Present your response in the following format:

      YOUR_RESPONSE

      ---

      Doc ID: doc_id
      Doc Title: doc_title
      Snippet tokens: tokens
      Snippet position: position/total_items

    If the user requests a text snippet in a specific position, you can use the function "get_text_snippet" with the parameters "doc_id" and "position" to retrieve the text snippet.

    When searching for information:
    1. Call find_closest_text ONCE with appropriate search terms
    2. If you need more context, use get_text_snippet for specific positions
    3. DO NOT repeatedly search for the same or very similar terms
    4. If the initial search doesn't find what you need, explain this to the user rather than retrying

    Please make sure that if your response does not have a particular reference to a text snippet, you shouldn't include every property in the JSON object. Only include the properties that are relevant to the response.

    ## PDF Document Search (Mandatory)
    When answering questions about uploaded PDFs, you MUST consult the document store BEFORE drafting any answer. If a cloud vector store (file_search) is available, call it first; if it returns no relevant results, call the local PDF DB tools once. Do NOT ask for permission to search. Do NOT answer from general knowledge without first checking the document store. Always include a compact citation footer under an `---` divider with: Doc Title, Snippet tokens, and Snippet position.
  TEXT
  
  llm do
    provider "OpenAI"
    model ["gpt-5", "gpt-4.1"]
    temperature 0.0
  end
  
  features do
    disabled !CONFIG["OPENAI_API_KEY"]
    easy_submit false
    auto_speech false
    initiate_from_assistant false
    pdf_vector_storage true
    image true
    mathjax true
  end
  
  tools do
    define_tool "find_closest_text", "Find the closest text in the database based on the input text" do
      parameter :text, "string", "The input text", required: true
      parameter :top_n, "integer", "The number of closest text snippets to return", required: true
    end
    
    define_tool "get_text_snippet", "Retrieve the text snippet from the database" do
      parameter :doc_id, "integer", "The document id", required: true
      parameter :position, "integer", "The position of the text snippet within the document", required: true
    end
    
    define_tool "list_titles", "List objects of the doc id and the title value from the docs table"
    
    define_tool "find_closest_doc", "Get the embedding of the input text and find the closest doc in the database" do
      parameter :text, "string", "The input text", required: true
      parameter :top_n, "integer", "The number of closest documents to return", required: true
    end
    
    define_tool "get_text_snippets", "Retrieve all the text snippets of a document from the database" do
      parameter :doc_id, "integer", "The document id", required: true
    end
  end
end
