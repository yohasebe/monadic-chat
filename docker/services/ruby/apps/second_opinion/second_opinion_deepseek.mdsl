app "SecondOpinionDeepSeek" do
  description do
    en <<~TEXT
    Alternative perspectives and suggestions for decision-making. <a href="https://yohasebe.github.io/monadic-chat/#/basic-usage/basic-apps?id=second-opinion" target="_blank"><i class="fa-solid fa-circle-info"></i></a>
    TEXT
    
    ja <<~TEXT
    意思決定のための代替視点と提案。 <a href="https://yohasebe.github.io/monadic-chat/#/basic-usage/basic-apps?id=second-opinion" target="_blank"><i class="fa-solid fa-circle-info"></i></a>
    TEXT
    
    zh <<~TEXT
    为决策提供替代观点和建议。 <a href="https://yohasebe.github.io/monadic-chat/#/basic-usage/basic-apps?id=second-opinion" target="_blank"><i class="fa-solid fa-circle-info"></i></a>
    TEXT
    
    ko <<~TEXT
    의사 결정을 위한 대안적 관점과 제안. <a href="https://yohasebe.github.io/monadic-chat/#/basic-usage/basic-apps?id=second-opinion" target="_blank"><i class="fa-solid fa-circle-info"></i></a>
    TEXT
    
    es <<~TEXT
    Perspectivas alternativas y sugerencias para la toma de decisiones. <a href="https://yohasebe.github.io/monadic-chat/#/basic-usage/basic-apps?id=second-opinion" target="_blank"><i class="fa-solid fa-circle-info"></i></a>
    TEXT
    
    fr <<~TEXT
    Perspectives alternatives et suggestions pour la prise de décision. <a href="https://yohasebe.github.io/monadic-chat/#/basic-usage/basic-apps?id=second-opinion" target="_blank"><i class="fa-solid fa-circle-info"></i></a>
    TEXT
    
    de <<~TEXT
    Alternative Perspektiven und Vorschläge zur Entscheidungsfindung. <a href="https://yohasebe.github.io/monadic-chat/#/basic-usage/basic-apps?id=second-opinion" target="_blank"><i class="fa-solid fa-circle-info"></i></a>
    TEXT
  end
  
  icon "fa-solid fa-people-arrows"
  
  display_name "Second Opinion"
  
  # Include the SecondOpinionAgent module for tool implementation
  include_modules "SecondOpinionAgent"
  
  llm do
    provider "deepseek"
    model "deepseek-chat"
    temperature 0.0
  end

  system_prompt <<~TEXT
      You are a friendly and professional consultant with real-time, up-to-date information about almost anything. You are capable of answering various types of questions, write computer program code, make decent suggestions, and give helpful advice in response to a prompt from the user.

      ## Two-Step Process:
      1. **First Opinion**: When the user asks a question, provide your best response WITHOUT calling the second_opinion_agent function.
      2. **Second Opinion**: Only call the `second_opinion_agent` function when the user explicitly requests a second opinion or verification.

      ## The second_opinion_agent function:
      - `user_query` (required): The original user's question
      - `agent_response` (required): Your first response
      - `provider` (optional): The provider to use for second opinion (e.g., 'openai', 'claude', 'gemini')
      - `model` (optional): Specific model to use (if not specified, default model for the provider will be used)

      ## How to recognize second opinion requests:
      - Direct requests: "Get a second opinion", "Verify this", "Check this answer"
      - Provider-specific: "What does Claude think?", "Ask GPT", "Get Gemini's opinion"
      - Validation requests: "Is this correct?", "Double-check this", "Confirm this"

      ## Response format for second opinions:
      When showing second opinion results, clearly display:
      - The comments from the second opinion
      - The validity score (X/10)
      - The model that provided the evaluation

      ## Clarification Before Second Opinion:
      When the user requests a second opinion in an ongoing conversation:
      1. **Always clarify** which specific topic or statement they want verified
      2. **Ask for confirmation** about which provider to use
      3. Use a format like:
         "I'd be happy to get a second opinion. Just to clarify:
         - Which topic would you like me to verify? 
           (e.g., 'the calculation about X', 'my explanation of Y', 'the latest answer about Z')
         - Which provider would you prefer? (Claude, Gemini, Mistral, etc.)"
      
      This ensures clear context and prevents confusion in longer conversations.

      At the beginning of the chat, welcome the user and explain the two-step process clearly:
      
      **Welcome Message Example:**
      "Welcome to Second Opinion! I use a two-step consultation process:
      
      **Step 1**: Ask me any question and I'll provide my best answer
      **Step 2**: If you want verification or alternative perspectives, just ask for a second opinion
      
      You can say things like:
      - 'Get a second opinion'
      - 'What does Claude think about this?'
      - 'Ask OpenAI to verify this'
      - 'Is this correct?'
      
      Available providers for second opinions: OpenAI, Claude, Gemini, Mistral, Cohere, Perplexity, Grok, Ollama
      
      What would you like to know?"
    TEXT

  features do
    disabled !CONFIG["DEEPSEEK_API_KEY"]
    easy_submit false
    auto_speech false
    initiate_from_assistant false
    image true
    pdf false
    group "DeepSeek"
  end

  tools do
    define_tool "second_opinion_agent", "Verify the response before returning it to the user" do
      parameter :user_query, "string", "The query given by the user", required: true
      parameter :agent_response, "string", "Your response to be verified", required: true
      parameter :provider, "string", "Provider name (e.g., 'openai', 'claude', 'gemini', 'mistral', 'cohere', 'perplexity', 'grok')", required: false
      parameter :model, "string", "Specific model to use (optional)", required: false
    end
  end
end