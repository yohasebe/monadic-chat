require_relative "second_opinion_tools"

class SecondOpinionOllama < MonadicApp
  include OllamaHelper
  include SecondOpinionAgent
  
  # Gets a second opinion on the agent's response
  # @param user_query [String] The original query from the user
  # @param agent_response [String] The response generated by the agent
  # @param provider [String, nil] Optional provider name (e.g., 'openai', 'claude')
  # @param model [String, nil] Optional specific model to use
  # @return [Hash] Second opinion including comments, validity, and model used
  def second_opinion_agent(user_query:, agent_response:, provider: nil, model: nil)
    # Input validation
    raise ArgumentError, "User query cannot be empty" if user_query.to_s.strip.empty?
    raise ArgumentError, "Agent response cannot be empty" if agent_response.to_s.strip.empty?
    
    # Call the method from SecondOpinionAgent module
    result = super(
      user_query: user_query, 
      agent_response: agent_response,
      provider: provider,
      model: model
    )
    
    # Ensure result has the expected structure
    {
      comments: result[:comments] || "No comments provided",
      validity: result[:validity] || "unknown",
      model: result[:model] || "unknown"
    }
  rescue StandardError => e
    {
      comments: "Error getting second opinion: #{e.message}",
      validity: "error",
      model: "none"
    }
  end
end