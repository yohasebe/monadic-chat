#!/usr/bin/env ruby

# frozen_string_literal: false

require "optimist"

require_relative "../lib/monadic/version"

# change current directory to the parent directory of the directory containing this file
Dir.chdir(File.expand_path(File.join(__dir__, "..")))

DEFAULT_PORT = 4567

selenium_image = "selenium/standalone-chrome:latest"
if `uname -s`.chomp.include? "Darwin"
  if `uname -m`.chomp == "arm64"
    selenium_image = "seleniarm/standalone-chromium:latest"
  end
end
ENV['SELENIUM_IMAGE'] = selenium_image
ENV['MONADIC_VERSION'] = Monadic::VERSION.to_s

# Parse command line options
opts = Optimist.options do
  version Monadic::VERSION.to_s
  banner "Usage: monadic [start|stop|restart] [options]"
  opt :daemonize, "Enable or disable daemon mode", default: false
  opt :log, "Enable or disable logging mode", default: false
  opt :port, "Specify the port number", type: :integer, default: DEFAULT_PORT
end

DOCKER_HOME = File.expand_path(File.join(__dir__, "..", ".."))

# Start the server
def start_server(opts)
  start_script = File.join(DOCKER_HOME, "support_scripts", "mac-start-docker.sh")
  mac_docker_start = File.read(start_script)

  # run the start script
  system(mac_docker_start)
  system("docker compose -f #{DOCKER_HOME}/docker-compose.yml build ruby_service --build-arg HOST_OS='$(uname -s)'") 

  # wait until docker daemon is running

  cmd_ruby = "docker container stop monadic-chat-ruby-container"
  cmd_selenium = "docker container start monadic-chat-selenium-container"
  cmd_pg = "docker container start monadic-chat-pgvector-container"
  cmd_python = "docker container start monadic-chat-python-container"
  system(cmd_ruby)
  system(cmd_selenium)
  system(cmd_pg)
  system(cmd_python)

  cmd = "thin start -R #{DOCKER_HOME}/ruby/config.ru -p #{opts[:port] || DEFAULT_PORT}"
  cmd += " --daemonize" if opts[:daemonize]
  cmd += " --log thin.log" if opts[:log]
  if system(cmd)
    puts "Server started on port #{opts[:port] || DEFAULT_PORT}"
  else
    puts "Server failed to start"
  end
end

# Stop the server
def stop_server
  if system("thin stop")
    puts "Server stopped"
  else
    puts "Server failed to stop"
  end
end

# Restart the server
def restart_server(opts)
  stop_server
  start_server(opts)
end

# Parse subcommand
subcommand = ARGV.shift

# Execute subcommand
case subcommand
when "start"
  start_server(opts)
when "stop"
  stop_server
when "restart"
  restart_server(opts)
else
  Optimist.die "Unknown subcommand. Use \"start\", \"stop\", or \"restart\"."
end
