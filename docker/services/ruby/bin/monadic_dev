#!/usr/bin/env ruby

# frozen_string_literal: false

require "optimist"

require_relative "../lib/monadic/version"

# change current directory to the parent directory of the directory containing this file
Dir.chdir(File.expand_path(File.join(__dir__, "..")))

DEFAULT_PORT = 4567

PID_FILE = __dir__ + "/thin.pid"

selenium_image = "selenium/standalone-chrome:latest"
if `uname -s`.chomp.include? "Darwin"
  if `uname -m`.chomp == "arm64"
    selenium_image = "seleniarm/standalone-chromium:latest"
  end
end
ENV["SELENIUM_IMAGE"] = selenium_image
ENV["MONADIC_VERSION"] = Monadic::VERSION.to_s
ENV["HOST_OS"] = `uname -s`.chomp

# Parse command line options
opts = Optimist.options do
  version Monadic::VERSION.to_s
  banner "Usage: monadic [start|stop|restart] [options]"
  opt :daemonize, "Enable or disable daemon mode", default: false
  opt :log, "Enable or disable logging mode", default: false
  opt :port, "Specify the port number", type: :integer, default: DEFAULT_PORT
end

DOCKER_HOME = File.expand_path(File.join(__dir__, "..", ".."))

def start_server(opts)
  start_script = File.join(DOCKER_HOME, "support_scripts", "mac-start-docker.sh")
  mac_docker_start = File.read(start_script)

  system(mac_docker_start)
  system("docker container stop monadic-chat-ruby-container > /dev/null") if system("docker container ls | grep monadic-chat-ruby-container > /dev/null")

  container_names = `docker ps -a --filter 'label=project=monadic-chat' --format '{{.Names}}'`.split("\n")

  container_names.each do |container_name|
    next if container_name == "monadic-chat-ruby-container"

    cmd1 = "docker container start #{container_name}"
    system(cmd1)
    cmd2 = "docker container inspect #{container_name} --format '{{.State.Status}}'"
    status = ""
    while status != "running"
      status = `#{cmd2}`.chomp
      pp status
      sleep 1
    end
  end

  cmd = "thin start -R #{DOCKER_HOME}/ruby/config.ru -p #{opts[:port] || DEFAULT_PORT} --pid #{PID_FILE}"
  cmd += " --daemonize" if opts[:daemonize]
  cmd += " --log thin.log" if opts[:log]
  if system(cmd)
    puts "Server started on port #{opts[:port] || DEFAULT_PORT}"
  else
    puts "Server failed to start"
  end
end

def stop_server
  begin
    pid = File.read(PID_FILE).to_i
    Process.kill 9, pid
    File.delete PID_FILE
    puts "Server stopped; PID file removed; Stopping docker containers"
  rescue Errno::ENOENT
    puts "Server not running"
  rescue StandardError
    puts "Server failed to stop; Maybe the server is not running"
  end

  container_names = `docker ps -a --filter 'label=project=monadic-chat' --format '{{.Names}}'`.split("\n")
  container_names.each do |container_name|
    next if container_name == "monadic-chat-ruby-container"

    cmd1 = "docker container stop #{container_name}"
    system(cmd1)
    cmd2 = "docker container inspect #{container_name} --format '{{.State.Status}}'"
    status = ""
    while status != "exited"
      status = `#{cmd2}`.chomp
      pp status
      sleep 1
    end
  end
end

# Restart the server
def restart_server(opts)
  stop_server
  start_server(opts)
end

# Parse subcommand
subcommand = ARGV.shift

# Execute subcommand
case subcommand
when "start"
  start_server(opts)
when "stop"
  stop_server
when "restart"
  restart_server(opts)
when "status"
  if File.exist?(PID_FILE)
    pid = File.read(PID_FILE).to_i
    begin
      Process.kill 0, pid
      puts "Server is running"
    rescue StandardError
      puts "Server is not running"
    end
  else
    puts "Server is not running"
  end
else
  Optimist.die "Unknown subcommand. Use \"start\", \"stop\", or \"restart\"."
end
