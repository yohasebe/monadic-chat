#!/usr/bin/env ruby

# frozen_string_literal: false

require "optimist"
require_relative "../lib/monadic/version"

# Change current directory to the parent directory of the directory containing this file
Dir.chdir(File.expand_path(File.join(__dir__, "..")))

DEFAULT_PORT = 4567

# kill all processes using 4567 port
system("lsof -i:4567 | awk 'NR!=1 {print $2}' | xargs kill -9")

PID_FILE = __dir__ + "/thin.pid"

# Set the data directory $HOME/monadic/data
DATA_DIR = File.expand_path(File.join(ENV["HOME"], "monadic", "data"))

selenium_image = "selenium/standalone-chrome:latest"
if `uname -s`.chomp.include? "Darwin"
  if `uname -m`.chomp == "arm64"
    selenium_image = "seleniarm/standalone-chromium:latest"
  end
end
ENV["SELENIUM_IMAGE"] = selenium_image
ENV["MONADIC_VERSION"] = Monadic::VERSION.to_s
ENV["HOST_OS"] = `uname -s`.chomp

# Parse command line options
opts = Optimist.options do
  version Monadic::VERSION.to_s
  banner "Usage: monadic [start|stop|restart|export|input] [options]"
  opt :daemonize, "Enable or disable daemon mode", default: false
  opt :log, "Enable or disable logging mode", default: false
  opt :port, "Specify the port number", type: :integer, default: DEFAULT_PORT
end

DOCKER_HOME = File.expand_path(File.join(__dir__, "..", ".."))

def start_server(opts)
  start_script = File.join(DOCKER_HOME, "support_scripts", "mac-start-docker.sh")
  mac_docker_start = File.read(start_script)

  system(mac_docker_start)
  system("docker container stop monadic-chat-ruby-container > /dev/null") if system("docker container ls | grep monadic-chat-ruby-container > /dev/null")

  container_names = `docker ps -a --filter 'label=project=monadic-chat' --format '{{.Names}}'`.split("\n")

  container_names.each do |container_name|
    next if container_name == "monadic-chat-ruby-container"

    cmd1 = "docker container start #{container_name}"
    system(cmd1)
    cmd2 = "docker container inspect #{container_name} --format '{{.State.Status}}'"
    status = ""
    while status != "running"
      status = `#{cmd2}`.chomp
      pp status
      sleep 0.5
    end
  end

  if File.exist?(PID_FILE)
    pid = File.read(PID_FILE).to_i
    Process.kill 0, pid
    puts "Server is already running"
  else
    cmd = "thin start -R #{DOCKER_HOME}/ruby/config.ru -p #{opts[:port] || DEFAULT_PORT} --pid #{PID_FILE}"
    cmd += " --daemonize" if opts[:daemonize]

    # Capture the command output
    if opts[:daemonize]
      output = `#{cmd} 2>&1`
    else
      output = `#{cmd}`
    end
    success = $?.success?

    if success
      puts "Server started on port #{opts[:port] || DEFAULT_PORT}"
    else
      puts "Server failed to start"
      # Save detailed error log to the specified directory on the host
      File.open(File.join(DATA_DIR, "monadic.log"), "a") do |file|
        file.puts("Failed to start server at #{Time.now}")
        file.puts(output)  # Write the detailed error output
      end
    end
  end
end

def stop_server
  begin
    pid = File.read(PID_FILE).to_i
    Process.kill 9, pid
    File.delete PID_FILE
    puts "Server stopped; PID file removed; Stopping docker containers"
  rescue Errno::ENOENT
    puts "Server not running"
  rescue StandardError
    puts "Server failed to stop; Maybe the server is not running"
  end

  container_names = `docker ps -a --filter 'label=project=monadic-chat' --format '{{.Names}}'`.split("\n")
  container_names.each do |container_name|
    next if container_name == "monadic-chat-ruby-container"

    cmd1 = "docker container stop #{container_name}"
    system(cmd1)
    cmd2 = "docker container inspect #{container_name} --format '{{.State.Status}}'"
    status = ""
    while status != "exited"
      status = `#{cmd2}`.chomp
      pp status
      sleep 0.5
    end
  end
end

# Restart the server
def restart_server(opts)
  stop_server
  start_server(opts)
end

def print_status
  if File.exist?(PID_FILE)
    pid = File.read(PID_FILE).to_i
    begin
      Process.kill 0, pid
      puts "Server is running"
    rescue StandardError
      puts "Server is not running"
    end
  else
    puts "Server is not running"
  end
end

def export_document_db
  command = <<~SHELL
pg_dump monadic | gzip > "#{DATA_DIR}/monadic.gz"
  SHELL

  # Run command and get the result with error reporting
  res = system(command)

  if res
    puts "Document DB exported to 'monadic.gz'"
  else
    puts "Failed to export document DB"
  end
end

def import_document_db
  command = <<~SHELL
dropdb monadic && createdb --locale=C --template=template0 monadic && gunzip -c "#{DATA_DIR}/monadic.gz" | psql monadic
  SHELL

  res = system(command)

  if res
    puts "Document DB imported from 'monadic.gz'"
  else
    puts "Failed to import document DB"
  end
end

# Parse subcommand
subcommand = ARGV.shift

# Execute subcommand
case subcommand
when "start"
  start_server(opts)
when "stop"
  stop_server
when "restart"
  restart_server(opts)
when "export"
  export_document_db
when "import"
  import_document_db
when "status"
  print_status
else
  Optimist.die "Unknown subcommand. Use \"start\", \"stop\", \"restart\", \"export\", \"import\", or \"status\""
end
