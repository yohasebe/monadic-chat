#!/usr/bin/env ruby

# frozen_string_literal: false

require "optimist"
require_relative "../lib/monadic/version"

# Change current directory to the parent directory of the directory containing this file
Dir.chdir(File.expand_path(File.join(__dir__, "..")))

DEFAULT_PORT = 4567
PID_FILE = __dir__ + "/thin.pid"

DATA_DIR = File.expand_path(File.join(ENV["HOME"], "monadic", "data"))
LOG_DIR = File.expand_path(File.join(ENV["HOME"], "monadic", "log"))

Dir.mkdir(DATA_DIR) unless Dir.exist?(DATA_DIR)
Dir.mkdir(LOG_DIR) unless Dir.exist?(LOG_DIR)

File.open(File.join(LOG_DIR, "command.log"), "w") {}

# Helper methods for OS detection
def is_mac?
  RUBY_PLATFORM.include?('darwin')
end

def is_linux?
  RUBY_PLATFORM.include?('linux')
end

# Select appropriate Selenium image based on architecture
selenium_image = "selenium/standalone-chrome:latest"
if is_mac?
  if `uname -m`.chomp == "arm64"
    selenium_image = "seleniarm/standalone-chromium:latest"
  end
end

# Set environment variables
ENV["SELENIUM_IMAGE"] = selenium_image
ENV["MONADIC_VERSION"] = Monadic::VERSION.to_s
ENV["HOST_OS"] = `uname -s`.chomp

# Define required containers for the application
REQUIRED_CONTAINERS = [
  "monadic-chat-python-container",
  "monadic-chat-selenium-container",
  "monadic-chat-syntree-container",
  "monadic-chat-ollama-container",
  "monadic-chat-pgvector-container"
]

# Parse command line options
opts = Optimist.options do
  version Monadic::VERSION.to_s
  banner "Usage: monadic [start|stop|restart|export|input] [options]"
  opt :daemonize, "Enable or disable daemon mode", default: false
  opt :log, "Enable or disable logging mode", default: false
  opt :port, "Specify the port number", type: :integer, default: DEFAULT_PORT
end

DOCKER_HOME = File.expand_path(File.join(__dir__, "..", ".."))

# Helper methods for container management
def container_exists?(container_name)
  system("docker container inspect #{container_name} > /dev/null 2>&1")
end

def container_running?(container_name)
  return false unless container_exists?(container_name)
  `docker container inspect #{container_name} --format '{{.State.Status}}'`.chomp == "running"
end

def start_server(opts)
  # Start Docker containers if on Mac
  if is_mac?
    start_script = File.join(DOCKER_HOME, "support_scripts", "mac-start-docker.sh")
    mac_docker_start = File.read(start_script)
    system(mac_docker_start)
  end

  # Stop existing Ruby container if running
  system("docker container stop monadic-chat-ruby-container > /dev/null") if system("docker container ls | grep monadic-chat-ruby-container > /dev/null")

  # Start required containers
  REQUIRED_CONTAINERS.each do |container_name|
    next unless container_exists?(container_name)
    unless container_running?(container_name)
      system("docker container start #{container_name}")
      # Wait for container to start
      30.times do  # Try for 15 seconds (30 * 0.5)
        break if container_running?(container_name)
        sleep 0.5
      end
    end
  end

  # Check if server is already running
  if File.exist?(PID_FILE)
    begin
      pid = File.read(PID_FILE).to_i
      if pid > 0
        Process.kill(0, pid)
        puts "Server is already running"
        return
      end
    rescue Errno::ESRCH, Errno::EPERM
      # Remove PID file if process doesn't exist or we don't have permission
      File.delete(PID_FILE)
    end
  end

  # Start the server
  cmd = "thin start -R #{DOCKER_HOME}/ruby/config.ru -p #{opts[:port] || DEFAULT_PORT} --pid #{PID_FILE}"
  cmd += " --log #{File.join(LOG_DIR, "server.log")}" if opts[:log]
  cmd += " --daemonize" if opts[:daemonize]
  
  if opts[:log] || !opts[:daemonize]
    puts "Starting server in debug mode..."
    exec(cmd)
  else
    output = `#{cmd} 2>&1`
    success = $?.success?

    if success
      puts "Server started on port #{opts[:port] || DEFAULT_PORT}"
    else
      puts "Server failed to start"
      File.open(File.join(LOG_DIR, "server.log"), "a") do |file|
        file.puts("Failed to start server at #{Time.now}")
        file.puts(output)
      end
    end
  end
end

def stop_server
  # Stop the main server process
  begin
    if File.exist?(PID_FILE)
      pid = File.read(PID_FILE).to_i
      if pid > 0
        Process.kill(9, pid)
        File.delete(PID_FILE)
      end
    end
    puts "Server stopped; PID file removed; Stopping docker containers"
  rescue Errno::ESRCH, Errno::ENOENT
    puts "Server not running"
  rescue StandardError => e
    puts "Error stopping server: #{e.message}"
  end

  # Stop all required containers
  REQUIRED_CONTAINERS.each do |container_name|
    if container_exists?(container_name)
      system("docker container stop #{container_name}")
      
      # Wait for container to stop
      30.times do  # Try for 15 seconds (30 * 0.5)
        break unless container_running?(container_name)
        sleep 0.5
      end
    end
  end
end

# Restart the server
def restart_server(opts)
  stop_server
  sleep 2  # Wait for processes to fully stop
  start_server(opts)
end

def print_status
  # Check main server status
  server_status = if File.exist?(PID_FILE)
    begin
      pid = File.read(PID_FILE).to_i
      Process.kill(0, pid)
      "running"
    rescue Errno::ESRCH
      "not running"
    end
  else
    "not running"
  end
  puts "Main server is #{server_status}"

  # Print status of required containers
  puts "\nContainer Status:"
  REQUIRED_CONTAINERS.each do |container_name|
    if container_exists?(container_name)
      status = container_running?(container_name) ? "running" : "stopped"
      puts "#{container_name}: #{status}"
    else
      puts "#{container_name}: does not exist"
    end
  end
end

def export_document_db
  command = <<~SHELL
    pg_dump monadic | gzip > "#{DATA_DIR}/monadic.gz"
  SHELL

  if system(command)
    puts "Document DB exported to 'monadic.gz'"
  else
    puts "Failed to export document DB"
  end
end

def import_document_db
  command = <<~SHELL
    dropdb monadic && createdb --locale=C --template=template0 monadic && gunzip -c "#{DATA_DIR}/monadic.gz" | psql monadic
  SHELL

  if system(command)
    puts "Document DB imported from 'monadic.gz'"
  else
    puts "Failed to import document DB"
  end
end

# Parse and execute subcommand
subcommand = ARGV.shift

case subcommand
when "start"
  start_server(opts)
when "stop"
  stop_server
when "restart"
  restart_server(opts)
when "export"
  export_document_db
when "import"
  import_document_db
when "status"
  print_status
else
  Optimist.die "Unknown subcommand. Use \"start\", \"stop\", \"restart\", \"export\", \"import\", or \"status\""
end
